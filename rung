#!/usr/bin/env python3
"""
"rung" is a tool to step thru fuzz scripts.
- its config file is at "~/.config/rung/rung.yaml
- the last syntactically correct  "~/.config/rung/rung.yaml"
"""
# pylint: disable=import-outside-toplevel,invalid-name
# pylint: disable=too-many-branches

import os
import sys
from InlineMenu import Menu
from configparser import ConfigParser

class Rung:
    """TBD"""
    here = None

    def __init__(self):
        self.rung_cmd = os.path.abspath(__file__)
        self.opts = None
        self.prompts = None
        self.config_dir = os.path.expanduser("~/.config/rung")
        self.config_file = self.config_dir + '/rung.ini'
        self.config = None
        self.menus = {}
        self.get_config()
        
    def get_config(self):
        """ TBD """
        if not os.path.isdir(self.config_dir):
            os.makedirs(self.config_dir, 0o755, True)
        if not os.path.isfile(self.config_file):
            with open(self.config_file, "w", encoding="utf-8") as f:
                f.write('[edit-rung-config]\n')
                f.write('a: ${EDITOR=-vi} ' + f'"{self.config_file}"\n')
                f.write('x: exit\n\n')
                f.write('[example]\n')
                f.write('a: command-a\n')
                f.write('b: prompt-b\n')
                f.write('   command-b\n')
                f.write('x: exit\n')
        self.config = ConfigParser()
        self.config.read(filenames=[self.config_file], encoding='utf-8')
        for section, options in self.config.items():
            self.menus[section] = options
        
    def dump(self):
        """ Dump the menus found."""
        for section, values in self.menus.items():
            print(f'\nMENU: {section} ...')
            for option, value in values.items():
                print(f'{option}: {value}')


    def run_cmd(self, cmd, precmd=None):
        """Run a command and option prior command
           - clear the screen first
           - if dry run, clear the screen first
         """
        echo = 'echo WOULD +' if self.opts.dry_run else 'set -x; '
        os.system('clear')
        if self.opts.dry_run:
            cmd = f'{cmd!r}'
            precmd = f'{precmd!r}' if precmd else None
        if precmd:
            print(f'1 ---- {echo} {precmd!r}')
            os.system(f'{echo} {precmd}')
            print(f'2 ---- {echo} {cmd!r}')
            os.system(f'{echo} {cmd}')
        else:
            print(f'3 ---- {echo} {cmd!r}')
            os.system(f'{echo} {cmd}')
            
    def build_prompts(self, options):
        """ TBD """
        keys = []
        prompts = {}
        cmds = {}
        for key, value in options.items():
            keys.append(key)
            lines = value.splitlines()
            prompts[key] = lines.pop(0)
            if not lines:
                cmds[key] = prompts[key]
            else:
                cmds[key] = '\n'.join(lines)

        return keys, prompts, cmds
    
    def make_section_menu(self):
        """ In the case there are not specified menus, make a menu of them all """
        keys = 'abcdefghijklmnopqrstuvwyz0123456780ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        options = {}
        for section in self.menus:
            if section != 'DEFAULT':
                key, keys = keys[:1], keys[1:]
                if key:
                    options[key] = f'rung {section}'

        options['x'] = 'exit'
        return options

    def do_menu(self, menu_name, options):
        """ TBD """
        keys, prompts, cmds = self.build_prompts(options)

        todo = keys[0]
        while True:
            menu = Menu(prompts, todo, f'======== {menu_name} ========')
            choice = menu.prompt()
            cmd = cmds[choice]
            if cmd in ('exit', 'quit'):
                return
            if cmd.startswith('rung '):
                cmd = f'python3 "{self.rung_cmd}" {cmd[5:]}'
            self.run_cmd(cmd)
            
            idx = keys.index(choice)
            todo = keys[min(idx+1, len(keys)-1)]

    def main(self):
        """TDB"""
        import argparse
        parser = argparse.ArgumentParser()
        parser.add_argument('-e', '--edit', action="store_true",
                help='edit config (i.e., runs edit-rung-config)')
        parser.add_argument('-n', '--dry-run', action="store_true",
                help='do NOT do anything')
        parser.add_argument('menus', nargs='*',
                help='zero or more arguments')
        self.opts = parser.parse_args()
        if self.opts.edit:
            self.opts.menus = ['edit-rung-config'] + self.opts.menus
#       todo = 'a'
        os.system('reset')
        # self.dump()
        if self.opts.menus:
            for menu_name in self.opts.menus:
                if menu_name in self.menus:
                    self.do_menu(menu_name, self.menus[menu_name])
        else:
            self.opts.menus = ['ALL-MENUS']
            self.do_menu ('ALL-MENUS', self.make_section_menu())


if __name__ == '__main__':
    Rung().main()
